//import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
    val kotlinVersion: String = System.getProperty("kotlinVersion")
    kotlin("jvm") version kotlinVersion
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

tasks.withType<Test> {
    useJUnitPlatform()
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

val koTestVersion = "5.1.0"

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Fake data
    implementation("io.github.serpro69:kotlin-faker:1.9.0")

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    testImplementation("io.kotest:kotest-runner-junit5:$koTestVersion")
    testImplementation("io.kotest:kotest-assertions-core:$koTestVersion")

    // Tools
    implementation("org.openjdk.jol:jol-cli:0.16")

}

application {
    // Define the main class for the application.
    mainClass.set("memories.AppKt")
}

val javaVersion = JavaVersion.VERSION_17
java.sourceCompatibility = javaVersion
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xjsr305=strict")
        jvmTarget = javaVersion.majorVersion
    }
}

application {
    this.applicationDefaultJvmArgs = listOf("-Xlog:gc*")
}

val runJol by tasks.creating(JavaExec::class) {
    classpath = sourceSets["main"].runtimeClasspath
    mainClass.set("org.openjdk.jol.Main")
    group = "tools"
}
